// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	go_geom "github.com/twpayne/go-geom"
)

type AudioFormat string

const (
	AudioFormat51    AudioFormat = "5.1"
	AudioFormat71    AudioFormat = "7.1"
	AudioFormatATMOS AudioFormat = "ATMOS"
)

func (e *AudioFormat) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AudioFormat(s)
	case string:
		*e = AudioFormat(s)
	default:
		return fmt.Errorf("unsupported scan type for AudioFormat: %T", src)
	}
	return nil
}

type NullAudioFormat struct {
	AudioFormat AudioFormat `json:"audioFormat"`
	Valid       bool        `json:"valid"` // Valid is true if AudioFormat is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAudioFormat) Scan(value interface{}) error {
	if value == nil {
		ns.AudioFormat, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AudioFormat.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAudioFormat) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AudioFormat), nil
}

type AvailabilityStatus string

const (
	AvailabilityStatusAVAILABLE   AvailabilityStatus = "AVAILABLE"
	AvailabilityStatusFASTFILLING AvailabilityStatus = "FAST FILLING"
	AvailabilityStatusSOLDOUT     AvailabilityStatus = "SOLD OUT"
)

func (e *AvailabilityStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AvailabilityStatus(s)
	case string:
		*e = AvailabilityStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AvailabilityStatus: %T", src)
	}
	return nil
}

type NullAvailabilityStatus struct {
	AvailabilityStatus AvailabilityStatus `json:"availabilityStatus"`
	Valid              bool               `json:"valid"` // Valid is true if AvailabilityStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAvailabilityStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AvailabilityStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AvailabilityStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAvailabilityStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AvailabilityStatus), nil
}

type BookingStatus string

const (
	BookingStatusPENDING   BookingStatus = "PENDING"
	BookingStatusSUCCESS   BookingStatus = "SUCCESS"
	BookingStatusFAILED    BookingStatus = "FAILED"
	BookingStatusCANCELLED BookingStatus = "CANCELLED"
)

func (e *BookingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookingStatus(s)
	case string:
		*e = BookingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BookingStatus: %T", src)
	}
	return nil
}

type NullBookingStatus struct {
	BookingStatus BookingStatus `json:"bookingStatus"`
	Valid         bool          `json:"valid"` // Valid is true if BookingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BookingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookingStatus), nil
}

type PaymentStatus string

const (
	PaymentStatusCreated  PaymentStatus = "created"
	PaymentStatusPaid     PaymentStatus = "paid"
	PaymentStatusFailed   PaymentStatus = "failed"
	PaymentStatusRefunded PaymentStatus = "refunded"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"paymentStatus"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type ShowStatus string

const (
	ShowStatusOPEN      ShowStatus = "OPEN"
	ShowStatusCLOSED    ShowStatus = "CLOSED"
	ShowStatusCANCELLED ShowStatus = "CANCELLED"
)

func (e *ShowStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ShowStatus(s)
	case string:
		*e = ShowStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ShowStatus: %T", src)
	}
	return nil
}

type NullShowStatus struct {
	ShowStatus ShowStatus `json:"showStatus"`
	Valid      bool       `json:"valid"` // Valid is true if ShowStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullShowStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ShowStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ShowStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullShowStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ShowStatus), nil
}

type UserRole string

const (
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"userRole"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type VideoFormat string

const (
	VideoFormat2D     VideoFormat = "2D"
	VideoFormat3D     VideoFormat = "3D"
	VideoFormatIMAX2D VideoFormat = "IMAX 2D"
	VideoFormatIMAX3D VideoFormat = "IMAX 3D"
	VideoFormat4DX    VideoFormat = "4DX"
	VideoFormatICE    VideoFormat = "ICE"
)

func (e *VideoFormat) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VideoFormat(s)
	case string:
		*e = VideoFormat(s)
	default:
		return fmt.Errorf("unsupported scan type for VideoFormat: %T", src)
	}
	return nil
}

type NullVideoFormat struct {
	VideoFormat VideoFormat `json:"videoFormat"`
	Valid       bool        `json:"valid"` // Valid is true if VideoFormat is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVideoFormat) Scan(value interface{}) error {
	if value == nil {
		ns.VideoFormat, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VideoFormat.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVideoFormat) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VideoFormat), nil
}

type Auditorium struct {
	ID               uuid.UUID   `json:"id"`
	CinemaID         uuid.UUID   `json:"cinemaId"`
	IsActive         bool        `json:"isActive"`
	Subtitles        bool        `json:"subtitles"`
	VideoFormat      VideoFormat `json:"videoFormat"`
	AudioFormat      AudioFormat `json:"audioFormat"`
	TotalRows        int32       `json:"totalRows"`
	TotalSeatsPerRow int32       `json:"totalSeatsPerRow"`
	CreatedAt        time.Time   `json:"createdAt"`
	UpdatedAt        time.Time   `json:"updatedAt"`
}

type Booking struct {
	ID        uuid.UUID     `json:"id"`
	UserID    uuid.UUID     `json:"userId"`
	ShowID    uuid.UUID     `json:"showId"`
	SeatID    uuid.UUID     `json:"seatId"`
	Status    BookingStatus `json:"status"`
	PaymentID uuid.UUID     `json:"paymentId"`
	CreatedAt time.Time     `json:"createdAt"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

type Cinema struct {
	ID        uuid.UUID     `json:"id"`
	Name      string        `json:"name"`
	OwnerID   uuid.UUID     `json:"ownerId"`
	IsActive  bool          `json:"isActive"`
	Location  go_geom.Point `json:"location"`
	CreatedAt time.Time     `json:"createdAt"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

type Movie struct {
	ID               uuid.UUID `json:"id"`
	Name             string    `json:"name"`
	AudioLanguage    string    `json:"audioLanguage"`
	SubtitleLanguage string    `json:"subtitleLanguage"`
	Formats          []string  `json:"formats"`
	Poster           string    `json:"poster"`
	ReleaseDate      time.Time `json:"releaseDate"`
	Synopsis         string    `json:"synopsis"`
	Trailer          string    `json:"trailer"`
	MovieCast        []string  `json:"movieCast"`
	RuntimeMinutes   int32     `json:"runtimeMinutes"`
	CreatedAt        time.Time `json:"createdAt"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

type Payment struct {
	ID          uuid.UUID     `json:"id"`
	OrderID     string        `json:"orderId"`
	Amount      int32         `json:"amount"`
	Status      PaymentStatus `json:"status"`
	PaymentTime time.Time     `json:"paymentTime"`
	CreatedAt   time.Time     `json:"createdAt"`
	UpdatedAt   time.Time     `json:"updatedAt"`
}

type Seat struct {
	ID           uuid.UUID `json:"id"`
	AuditoriumID uuid.UUID `json:"auditoriumId"`
	SectionID    uuid.UUID `json:"sectionId"`
	RowKey       string    `json:"rowKey"`
	SeatNumber   int32     `json:"seatNumber"`
	SeatOrder    int32     `json:"seatOrder"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
}

type Section struct {
	ID           uuid.UUID `json:"id"`
	AuditoriumID uuid.UUID `json:"auditoriumId"`
	Name         string    `json:"name"`
	Price        int32     `json:"price"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
}

type Show struct {
	ID           uuid.UUID          `json:"id"`
	AuditoriumID uuid.UUID          `json:"auditoriumId"`
	MovieID      uuid.UUID          `json:"movieId"`
	ShowTime     time.Time          `json:"showTime"`
	Status       ShowStatus         `json:"status"`
	Availability AvailabilityStatus `json:"availability"`
	CreatedAt    time.Time          `json:"createdAt"`
	UpdatedAt    time.Time          `json:"updatedAt"`
}

type User struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	IsActive  bool      `json:"isActive"`
	Role      UserRole  `json:"role"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}
